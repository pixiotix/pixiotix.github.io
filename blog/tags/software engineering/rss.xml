<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Pixiotix • Posts by &#34;software engineering&#34; tag</title>
        <link>https://pixiotix.com</link>
        <description></description>
        <language>en</language>
        <pubDate>Fri, 12 Mar 2021 11:32:07 +1100</pubDate>
        <lastBuildDate>Fri, 12 Mar 2021 11:32:07 +1100</lastBuildDate>
        <category>Pixiotix</category>
        <category>Announcements</category>
        <category>Software Engineering</category>
        <category>Leadership</category>
        <category>Innovation</category>
        <category>Machine Learning</category>
        <category>Computer Vision</category>
        <category>History</category>
        <category>Business</category>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/03/12/Expect-the-unexpected/</guid>
            <title>Expect the unexpected</title>
            <link>https://pixiotix.com/blog/2021/03/12/Expect-the-unexpected/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Fri, 12 Mar 2021 11:32:07 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Software developers need to “expect the unexpected”. Services fail… networks go down… disks fill up… developers make mistakes. We need to be cognizant of what can go wrong, and decide how to deal with it.&lt;/p&gt;
&lt;p&gt;Which approach to handling error conditions is appropriate depends entirely on the error and the system. Making the right call is key to building a reliable system.&lt;/p&gt;
&lt;p&gt;The most egregious approach is to catch &amp;amp; ignore errors.Actively hiding errors and blithely carrying on inevitably causes consequential errors which can be incredibly hard to understand.&lt;/p&gt;
&lt;p&gt;In behind-the-scenes systems, failing “hard and fast” on even the smallest unexpected circumstance is the best option. A build system that “tries to keep going” is poison for building reliable software… &lt;/p&gt;
&lt;p&gt;In user facing cases, catching errors, logging them and failing out of a particular piece of work is quite appropriate - users these days are very familiar with “sorry, something went wrong!”, and partial degradation of service is better than complete failure. But make sure someone is responsible for triaging these issues &amp;amp; fixing them!&lt;/p&gt;
&lt;p&gt;Identify error conditions, apply an approach thoughtfully &amp;amp; move on. Don’t bury your head in the sand.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/03/04/The-Sunk-Cost-Fallacy/</guid>
            <title>The Sunk Cost Fallacy</title>
            <link>https://pixiotix.com/blog/2021/03/04/The-Sunk-Cost-Fallacy/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <category>Innovation</category>
            <pubDate>Thu, 04 Mar 2021 13:28:52 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;It happens to the best of us. You’ve worked super hard, put in the hours, built something that should be awesome, but it’s just not working out. Being the dedicated individual you are, you plough more time into it. You’ve expended so much energy, that you can’t help but continue. Time to think about the Sunk Cost Fallacy.&lt;/p&gt;
&lt;p&gt;Should you continue down a path? Try a new approach? Abandon and try something new?&lt;/p&gt;
&lt;p&gt;The Sunk Cost Fallacy tells us that only your current options really matter. Time, energy and money already invested in something has already been spent - it can’t be recovered - it’s a Sunk Cost.&lt;/p&gt;
&lt;p&gt;Look at your options now, look at their costs going forward, and try to put the past aside. Make a decision, and go for it.&lt;/p&gt;
&lt;p&gt;Could you do with some help figuring out where your development is at? Looking for some advice and inspiration? Pixiotix provides independent technical consulting &amp;amp; advice for companies working on innovative software &amp;amp; hardware systems. Check out &lt;a href=&#34;https://pixiotix.com/&#34;&gt;https://pixiotix.com&lt;/a&gt; and get in touch to find out more.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/03/02/building-quality-products/</guid>
            <title>Building quality products</title>
            <link>https://pixiotix.com/blog/2021/03/02/building-quality-products/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <category>Leadership</category>
            <pubDate>Tue, 02 Mar 2021 11:49:28 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;How do you deliver &lt;em&gt;quality&lt;/em&gt; software products? Lots of automated testing? Go all in with TDD? Build a comprehensive manual test procedure? Invest in pair programming? Wait for your customers to find problems and fight the fires as they pop up?&lt;/p&gt;
&lt;p&gt;It’s easy to focus on a particular testing technique and assume quality delivery. Find bugs, fix bugs, ship software.&lt;/p&gt;
&lt;p&gt;But quality is about much more than that. Quality software comes from teams who care about quality as much as it comes from processes that seek to assure quality.&lt;/p&gt;
&lt;p&gt;Quality isn’t just about lack of bugs. It’s about how your system makes your customers feel - stability, security, consistency, usability, availability, design are all key parts of that experience.&lt;/p&gt;
&lt;p&gt;It’s important to consider all quality across the whole system on a spectrum - which aspects of quality are non-negotiable in your product? Which are important enough to hold a release? Which can be released, but need to be fixed later? What types of issues do you just not care about?&lt;/p&gt;
&lt;p&gt;Define quality requirements and processes based on the overall priorities.&lt;/p&gt;
&lt;p&gt;Decide what quality means for your product, customers and team and have a plan to deliver.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/02/10/32388409.designing-for-flexibility/</guid>
            <title>Designing for flexibility</title>
            <link>https://pixiotix.com/blog/2021/02/10/32388409.designing-for-flexibility/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Wed, 10 Feb 2021 04:32:18 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;When building a new software product, founders are typically laser-focussed on building a product that meets their immediate business needs for launch. With limited time and money to bring a product to market, that’s wise. Just be aware that too tight a focus often leads to rigid software &amp;amp; systems and can cause significant pain after launch.&lt;/p&gt;&lt;p&gt;The high level characteristics of a software system, such as its flexibility, scalability and stability become increasingly hard to change as the system is developed. They’re hard to retrofit, so it’s important to think about what’s important up front, and plan for it.&lt;/p&gt;&lt;p&gt;Yes, building to flex, grow, scale and be reliable will take more effort up front. But the up front effort pales in comparison to the effort to achieve the same once the system is developed.&lt;/p&gt;&lt;p&gt;If you’re building a tech business, you need a product that will grow with you &amp;amp; let you achieve your business goals.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://pixiotix.com&#34;&gt;Pixiotix&lt;/a&gt; specialises in working with founders to make pragmatic system, software and database architectural and design decisions that will give you a clear path forward to an awesome product. Check out the site &amp;amp; get in touch to see how we can help.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/27/31917185.when-a-measure-becomes-a-target/</guid>
            <title>When a measure becomes a target...</title>
            <link>https://pixiotix.com/blog/2021/01/27/31917185.when-a-measure-becomes-a-target/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <category>Leadership</category>
            <pubDate>Wed, 27 Jan 2021 05:15:20 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;The saying “When a measure becomes a target, it ceases to be a good measure” applies very well to software development. If you’re trying to measure output / quality in software development using any simple measure you’re doing it wrong.&lt;/p&gt;&lt;p&gt;Measuring lines of code? Expect verbose code...&lt;br&gt;Measuring tickets closed? Expect smaller tickets…&lt;br&gt;Measuring features completed? Expect a drop in quality...&lt;/p&gt;&lt;p&gt;Pushing harder on these metrics when the going gets tough is only going to lead to developers gaming the metric, consciously or unconsciously.&lt;/p&gt;&lt;p&gt;The golden rule?&amp;nbsp;&lt;/p&gt;&lt;p&gt;Build a team you can trust... and trust them.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/26/31877259.beware-of-the-cargo-cult/</guid>
            <title>Beware of the cargo-cult</title>
            <link>https://pixiotix.com/blog/2021/01/26/31877259.beware-of-the-cargo-cult/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Tue, 26 Jan 2021 02:32:37 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Got a technical problem to solve? Analysing data? Machine learning! Deploying code? Spin up a Kubernetes cluster! Need a web app? Jump into React! Sharing information? Crank up a blockchain!&lt;/p&gt;&lt;p&gt;Not so fast! All technologies have their positives and negatives, and their applicability, costs and benefits vary greatly based on the problem they’re applied to and particularly the scale of that problem.&lt;/p&gt;&lt;p&gt;So consider the options carefully - Cassandra vs RDS vs MySQL vs sqlite? Kubernetes cluster vs EC2 vs hosted server? Each decision is critical - avoid the lure of the cargo cult.&lt;/p&gt;&lt;p&gt;Having trouble making a call on which technologies to use in your startup? Need some help evaluating the options, keeping costs low while you start, while being ready to scale? Get in touch with &lt;a href=&#34;https://pixiotix.com&#34;&gt;Pixiotix&lt;/a&gt; and get considered, independent, practical advice on these problems and more.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/25/31837722.developers-dont-make-your-life-easy/</guid>
            <title>Developers: don&#39;t make your life easy</title>
            <link>https://pixiotix.com/blog/2021/01/25/31837722.developers-dont-make-your-life-easy/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Mon, 25 Jan 2021 00:24:37 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Software developers, your job *isn’t* to make your work easy. Software development involves a lot of tradeoffs, and if your thought process is “what’s the easiest way to solve this problem?”, you’re not going about it the right way.&lt;/p&gt;&lt;p&gt;Think longer term, bigger picture. Understand that all those fiddly little decisions you need to make day-to-day add up to significant impact on the customer, the team and ultimately the company.&lt;/p&gt;&lt;p&gt;If you hit a bug while looking for some other issue, figure out what’s going on and fix it! If adding a small new feature would make the code unwieldy, restructure. Make sure columns in tables sort correctly - not “technically correct” - but “as the customer would expect”. Think through those frustrating corner cases and deal with them, Expect things to fail and handle errors appropriately!&lt;/p&gt;&lt;p&gt;Day to day micro-decisions from engineers have a massive impact on customer experience, product quality, code quality, and ultimately on the company bottom-line.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/22/31760995.step-back-to-move-forward/</guid>
            <title>Step back to move forward</title>
            <link>https://pixiotix.com/blog/2021/01/22/31760995.step-back-to-move-forward/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Fri, 22 Jan 2021 03:20:35 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;When I’m called over to help out with a tricky problem in a complex software system, I’m typically hit with lots of detail on how the problem is manifesting. Typically my go-to response is “let’s take a step back”...&lt;/p&gt;&lt;p&gt;In a lot of instances, issues that manifest in a very specific way are in fact symptoms of a larger scale problem, so it’s important to put them in context. Pull back far enough, and the bigger problem should become apparent - staying micro-focussed can obscure the view.&lt;/p&gt;&lt;p&gt;It’s an unfortunate fact of Software Engineering that failure modes are typically the worst tested code paths, so a failure at one level will often manifest as a subsequent failure at another level. Make sure both (or all!) problems contributing are identified and fixed.&lt;/p&gt;&lt;p&gt;When problem solving, make sure you don’t miss the forest for the trees.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/18/31621188.design-review/</guid>
            <title>Design review</title>
            <link>https://pixiotix.com/blog/2021/01/18/31621188.design-review/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Mon, 18 Jan 2021 01:46:56 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Significant pieces of engineering work can benefit greatly from design review. The review process can be as simple as an informal chat between peers or follow a formal process with a proposal document and written feedback or an in-person review session.&lt;/p&gt;&lt;p&gt;Design review is particularly valuable when a problem is highly constrained through user requirements or technical difficulty.&lt;/p&gt;&lt;p&gt;Design discussions often swing wildly between a number of proposals which all seem reasonable at first glance but are discounted due to various deficiencies with respect to requirements. Ensure the team feels empowered to challenge proposals, and not threatened by having their ideas challenged.&amp;nbsp;&lt;/p&gt;&lt;p&gt;As a leader, prepare for your proposals to be found wanting by the team - it can hurt but if they come up with better proposals, you’re winning.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/16/31574916.code-review/</guid>
            <title>Code review</title>
            <link>https://pixiotix.com/blog/2021/01/16/31574916.code-review/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Sat, 16 Jan 2021 01:57:23 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;A good code review process can greatly improve code quality while bringing significant benefits in engineering team culture.&amp;nbsp;&lt;/p&gt;&lt;p&gt;At its most basic, code review helps catch errors that would otherwise have been missed by the author of a code change. Involving more senior engineers and/or those with more experience in a particular codebase or technique can catch higher level issues such as leaky abstractions, locking hierarchy or threading problems.&lt;/p&gt;&lt;p&gt;But just as importantly, code review can be used to encourage engineers to take responsibility for their work. Not just make something work, but think through what they’re doing, understand it, make a good change, and be prepared to defend it.&lt;/p&gt;&lt;p&gt;A team that can respectfully give feedback and even challenge each others work is a stronger team.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/13/31334756.the-time-scope-quality-tradeoff/</guid>
            <title>The time / scope / quality tradeoff</title>
            <link>https://pixiotix.com/blog/2021/01/13/31334756.the-time-scope-quality-tradeoff/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Wed, 13 Jan 2021 22:56:46 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;The tradeoff inherent between time, scope and quality is fundamental in Software Development. Pushing a team to “crunch” has diminishing returns, and whilst it can be justified occasionally, resentment will build up if it’s used as a crutch for bad planning / unrealistic expectations.&lt;/p&gt;&lt;p&gt;Set pragmatic quality gates for different release types and stick to them. Involve engineers in the planning process to set realistic expectations for release dates, but accept that the more novel something is, the less certain the timeline will be.&amp;nbsp;&lt;/p&gt;&lt;p&gt;If a release date is set in stone, accept that scope may need to be reduced to make the date, and make the call on what to cut early.&lt;/p&gt;&lt;p&gt;Respect the time / scope / quality tradeoff.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/13/31305653.rigor-in-software-development/</guid>
            <title>Rigor in Software Development</title>
            <link>https://pixiotix.com/blog/2021/01/13/31305653.rigor-in-software-development/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Wed, 13 Jan 2021 03:19:40 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Different software systems require different levels of rigour applied in their development. Software running on a medical implant is life critical, heavily regulated, and requires the highest degree of rigour.&lt;/p&gt;&lt;p&gt;By contrast, software running a barebones minimum-viable-product for a nascent startup can be Rube-Goldberg-esque in structure, as long as it gets the job done.&lt;/p&gt;&lt;p&gt;Founders should carefully consider what their requirements and expectations are for the products they are building. Developing a system that is reliable, scalable, correct, testable, performant and maintainable software to solve complex problems requires a level of rigour.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Don’t assume a development team will deliver on system requirements that haven’t been specified.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pixiotix.com/blog/2021/01/12/31270639.attention-to-detail/</guid>
            <title>Attention to detail</title>
            <link>https://pixiotix.com/blog/2021/01/12/31270639.attention-to-detail/</link>
            <category>Pixiotix</category>
            <category>Software Engineering</category>
            <pubDate>Tue, 12 Jan 2021 02:06:19 +1100</pubDate>
            <description><![CDATA[ &lt;p&gt;Attention to detail is critical in software development. Software is described as code, and computers execute the code as it is written, regardless of the intent of the developer.&amp;nbsp;&lt;/p&gt;&lt;p&gt;In the best case, errors are picked up by the developers editor or compiler and can be rapidly fixed. Worst case, errors can lurk for years undetected, causing intermittent small failures, or eventually a critical failure.&lt;/p&gt;&lt;p&gt;When every character matters, it pays to “dot your i’s and cross your t’s”.&amp;nbsp;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
